#!/usr/bin/env python

import rancher_env
import argparse
import sys

class RancherEnv(object):

    def __init__(self):

        rancher_env.make_confdir()

        parser = argparse.ArgumentParser(description='Wrapper for rancher-cli. Support multiple environments', add_help=False)

        options = parser.add_argument_group('Options')
        options.add_argument('-h', '--help', action='help')
        #options.add_argument('--reqarg', '-r', help='This is required', required=True)
        #options.add_argument('--optarg','-o', help="This is optional", required=False)

        commands = parser.add_argument_group('Commands')
        commands.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        #args = parser.parse_args(sys.argv)
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def ps(self):
        parser = argparse.ArgumentParser(
            description='List all environments from all configs')
        args = parser.parse_args(sys.argv[2:])
        print('tst')

    def config(self):
        parser = argparse.ArgumentParser(
            description='Save current config')
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('--print', '-p', help="This will print the current saved configurations", required=False, action='store_true', default=False)
        parser.add_argument('--switch_config', '-sc', help="This will switch to specified configuration", required=False, nargs='?', default="")
        args = parser.parse_args(sys.argv[2:])
        print('Running git fetch, repository=%s' % args.repository)


if __name__ == '__main__':
    RancherEnv()